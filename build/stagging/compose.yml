version: '3.9'

networks:
  proxy:
    external: true
  internal:
    name: "zerotwo_staging_internal"

services:
  web:
    container_name: 02_django_stagging
    restart: unless-stopped
    build:
      context: ../../django
      dockerfile: ./compose/prod/Dockerfile
    volumes:
      - type: bind
        source: ../../django/web/static
        target: /web/static
      - type: bind
        source: ../../django/web/media
        target: /web/media
    networks:
      - internal
      - proxy
    env_file:
      - ./conf1/django.env
      - ./conf1/sql.env
    expose:
      - 8000
      - 9000
    depends_on:
      db:
        condition: service_healthy
      mqtt:
        condition: service_started
    labels:
      - traefik.enable=true
      - traefik.http.routers.02_django_stagging.rule=Host(`staging.zerotwo.tenere.konar.pwr.edu.pl`)
      - traefik.http.routers.02_django_stagging.entrypoints=websecure
      - traefik.http.routers.02_django_stagging.tls.certresolver=leresolver
      - traefik.http.routers.02_django_stagging.service=02_web
      - traefik.http.services.02_web.loadbalancer.server.port=8000

      - traefik.http.routers.ws_02_stagging.rule=Host(`staging.zerotwo.tenere.konar.pwr.edu.pl`)&&PathPrefix(`/sock`)
      - traefik.http.routers.ws_02_stagging.entrypoints=websecure
      - traefik.http.routers.ws_02_stagging.service=02_ws
      - traefik.http.routers.ws_02_stagging.tls.certresolver=leresolver
      - traefik.http.services.02_ws.loadbalancer.server.port=9000

  sheduler:
    container_name: 02_sheduler_stagging
    image: mcuadros/ofelia
    restart: always
    depends_on:
      db:
        condition: service_healthy
      media:
        condition: service_started
      web:
        condition: service_started
    networks:
      - internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - type: bind
        source: ./tasks.ini
        target: /etc/ofelia/config.ini
        read_only: true

  db:
    image: postgres
    container_name: 02_sql_stagging
    restart: always
    healthcheck:
          test: ["CMD", "pg_isready", "-U", "prod", "-d", "domena_db"]
          interval: 5s
          timeout: 10s
          retries: 120
    networks:
      - internal
    volumes:
      - type: bind
        source: ./sql_buckups/daily
        target: /backup/daily
      - type: bind
        source: ./sql_buckups/weekly
        target: /backup/weekly
      - type: bind
        source: ./sql_buckups/monthly
        target: /backup/monthly
      - type: bind
        source: ./sql_buckups
        target: /backup
    env_file:
      - ./conf1/sql.env
    expose:
      - 5432

  media:
    container_name: 02_media_stagging
    build: 
      context: ../../django/web
      dockerfile: ./Dockerfile
    volumes:
      - type: bind
        source: ../../django/web/static
        target: /usr/share/nginx/static
      - type: bind
        source: ../../django/web/media
        target: /usr/share/nginx/media
    networks:
      - proxy
      - internal
    expose:
      - 80
    labels:
      - traefik.enable=true
      - traefik.http.routers.02_media_stagging.rule=Host(`staging.zerotwo.tenere.konar.pwr.edu.pl`)&&(PathPrefix(`/static`)||PathPrefix(`/media`))
      - traefik.http.routers.02_media_stagging.entrypoints=websecure
      - traefik.http.routers.02_media_stagging.tls.certresolver=leresolver
      - traefik.http.services.02_media_stagging.loadbalancer.server.port=80

  mqtt:
    image: eclipse-mosquitto:2
    container_name: 02_mqtt_stagging
    restart: always
    networks:
      - proxy
      - internal
    volumes:
      - type: bind 
        source: ./conf1/mqtt/config/
        target: /mosquitto/config/
        read_only: true
      - type: bind
        source: ./conf1/mqtt/log/
        target: /mosquitto/log/
        read_only: true
    expose:
      - 9001
    labels:
      - traefik.enable=true
      - traefik.http.routers.mqtt_02_staging.rule=Host(`staging.zerotwo.tenere.konar.pwr.edu.pl`) && PathPrefix(`/broker`)
      - traefik.http.routers.mqtt_02_staging.entrypoints=websecure
      - traefik.http.routers.mqtt_02_staging.tls.certresolver=leresolver
      - traefik.http.services.mqtt_02_staging.loadbalancer.server.port=9001
      - traefik.http.services.mqtt_02_staging.loadBalancer.sticky.cookie=true